/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string >s;
    void dfs(TreeNode* &root,string &ss){
        if(root==NULL)return;
        if(root->left==NULL&&root->right==NULL){
            s.push_back(ss);
            return ;
        }
        ss.push_back('L');
        dfs(root->left,ss);
        ss.pop_back();
        ss.push_back('R');
        dfs(root->right,ss);
        ss.pop_back();
    }
    int countPairs(TreeNode* root, int k) {
                ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(0);

        int ans=0;
        string x;
        x="";
        dfs(root,x);
        for(int i=0;i<s.size();i++){
            string a=s[i];
            for(int j=i+1;j<s.size();j++){
                string b=s[j];
                int con=a.size(),con2=b.size();
                for(int o=0;o<min(a.size(),b.size());o++){
                    if(a[o]!=b[o])break;
                    con--;
                    con2--;
                }
                if(con+con2<=k)ans++;
            }
        }
        return ans;
    }
};
